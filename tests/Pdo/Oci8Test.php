<?php
require_once 'PHPUnit/Framework.php';

require_once 'Pdo/Oci8.php';
require_once 'Pdo/Oci8/Statement.php';

/**
 * Test class for Pdo_Oci8.
 * Generated by PHPUnit on 2009-05-31 at 15:40:59.
 */
class Pdo_Oci8Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var Pdo_Oci8
     */
    protected $_object;

    /**
     * DSN string
     *
     * @var string
     */
    protected $_dsn;

    /**
     * Database username
     *
     * @var string
     */
    protected $_username;

    /**
     * Database password
     *
     * @var string
     */
    protected $_password;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->_dsn      = 'oci:dbname=//localhost:1521/xe;charset=AL32UTF8';
        $this->_username = 'hr';
        $this->_password = 'hrpwd';

        $this->_object = new Pdo_Oci8(
            $this->_dsn,
            $this->_username,
            $this->_password,
            [PDO::ATTR_PERSISTENT => true]
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
        unset($this->_object);
    }

    /**
     * Tests the constructor
     */
    public function testConstructor()
    {
        $pdoOci8 = new Pdo_Oci8(
            $this->_dsn,
            $this->_username,
            $this->_password
        );

        $this->assertType('Pdo_Oci8', $pdoOci8);
        $this->assertType('PDO', $pdoOci8);
    }

    /**
     * Tests the constructor using a persistent connection
     */
    public function testConstructorPersistentConnection()
    {
        $pdoOci8 = new Pdo_Oci8(
            $this->_dsn,
            $this->_username,
            $this->_password,
            [PDO::ATTR_PERSISTENT => true]
        );

        $this->assertType('Pdo_Oci8', $pdoOci8);
        $this->assertType('PDO', $pdoOci8);
    }

    /**
     * Tests an exception thrown from the constructor when database connection fails
     */
    public function testConstructorWithException()
    {
        $this->setExpectedException('PDOException');

        // Fail to set username/password to generate an error
        $pdoOci8 = new Pdo_Oci8($this->_dsn);
    }

    /**
     * Tests preparing a statement
     */
    public function testPrepare()
    {
        $sql = 'SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = :id';
        $this->assertType('Pdo_Oci8_Statement', $this->_object->prepare($sql));
    }

    /**
     * Tests preparing a statement with an exception thrown
     */
    public function testPrepareException()
    {
        $this->setExpectedException('PDOException');

        $sql = "SELECT ' FROM DUAL";
        $this->_object->prepare($sql);
    }

    /**
     * Tests the return value of isTransaction() when the object is not in a transaction
     */
    public function testNoTransaction()
    {
        $this->assertFalse($this->_object->isTransaction());
    }

    /**
     * Tests starting a transaction
     */
    public function testBeginTransaction()
    {
        $this->assertTrue($this->_object->beginTransaction());
        $this->assertTrue($this->_object->isTransaction());
    }

    /**
     * Tests starting a transaction while one is already open
     */
    public function testBeginTransactionException()
    {
        $this->setExpectedException('PDOException');

        $this->_object->beginTransaction();
        $this->_object->beginTransaction();
    }

    /**
     * Tests committing a transaction
     */
    public function testCommit()
    {
        $this->_object->beginTransaction();

        $this->assertTrue($this->_object->commit());
        $this->assertFalse($this->_object->isTransaction());
    }

    /**
     * Tests exception thrown when trying to commit without a transaction
     */
    public function testCommitException()
    {
        $this->setExpectedException('PDOException');

        $this->_object->commit();
    }

    /**
     * Tests rolling back a transaction
     */
    public function testRollBack()
    {
        $this->_object->beginTransaction();

        $this->assertTrue($this->_object->rollBack());
        $this->assertFalse($this->_object->isTransaction());
    }

    /**
     * Tests exception thrown when trying to roll back without a transaction
     */
    public function testRollBackException()
    {
        $this->setExpectedException('PDOException');

        $this->_object->rollBack();
    }

    /**
     * Tests setting an attribute
     */
    public function testSetAttribute()
    {
        $this->assertTrue(
            $this->_object->setAttribute(
                PDO::ATTR_CASE,
                PDO::CASE_LOWER
            )
        );
    }

    /**
     * Tests executing a SQL query
     */
    public function testExec()
    {
        $sql = "
            INSERT INTO EMPLOYEES (
                EMPLOYEE_ID,
                FIRST_NAME,
                LAST_NAME,
                EMAIL,
                HIRE_DATE,
                JOB_ID)
            VALUES (
                207,
                'John',
                'Doe',
                'jdoe@mailinator.com',
                '01-May-09',
                'IT_PROG')";

        $this->_object->beginTransaction();
        $rowsAffected = $this->_object->exec($sql);
        $this->_object->rollBack();

        $this->assertEquals(1, $rowsAffected);
    }

    /**
     * Tests executing a SQL query and returning a statement object
     */
    public function testQuery()
    {
        $this->markTestIncomplete('Incomplete test');
    }

    /**
     * Tests the error thrown from lastInsertId()
     */
    public function testLastInsertId()
    {
        $this->setExpectedException('PHPUnit_Framework_Error');

        $this->_object->lastInsertId();
    }

    /**
     * Tests the return value of the errorCode() method
     */
    public function testErrorCode()
    {
        $this->assertType('string', $this->_object->errorCode());
    }

    /**
     * Tests the return value of the errorInfo() method
     */
    public function testErrorInfo()
    {
        $this->assertType('array', $this->_object->errorInfo());
    }

    /**
     * Tests getting an attribute
     */
    public function testGetAttribute()
    {
        $this->_object->setAttribute(
            PDO::ATTR_CASE,
            PDO::CASE_LOWER
        );

        $this->assertEquals(
            PDO::CASE_LOWER,
            $this->_object->getAttribute(PDO::ATTR_CASE)
        );

        $this->assertType(
            'null',
            $this->_object->getAttribute('foo')
        );
    }

    /**
     * Tests quoting a string
     */
    public function testQuote()
    {
        $strToQuote = "O'Reilly";
        $quotedStr  = "'O''Reilly'";

        $this->assertEquals(
            $quotedStr,
            $this->_object->quote($strToQuote)
        );
    }
}

?>
